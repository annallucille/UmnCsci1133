Lab 3 Instructions 

Warm Up (lab03WarmUp.py)
    2) Creating a function
     This graphics stuff is fun!  But writing out all of those commands starts getting very tiresome indeed.  
     We can save ourselves a lot of effort by noticing all the similarities.  Note that drawing each square requires 
     exactly the same steps.  It's a computational procedure in its own right.  If we give a name to this procedure, 
     like "draw_square", then the task gets a lot easier.  We could just invoke the "draw_square" procedure, turn the 
     turtle 30 degrees counterclockwise, invoke the draw_square procedure again, turn the turtle, invoke draw_square, etc.
    3) Triangles
     Next, define a function named draw_triangle with a parameter named length. When the function draw_triangle is called,
      it will draw an equilateral triangle, and each side of the triangle will be length units long. 
    4) Shape Selection
     Finally, you should write a Python program to prompt the user for the type of shape to draw (either a triangle 
     ('t' or 'T') or a square ('s' or 'S')), in addition to the side length.  If the type of shape to draw is not one of  
     't','T','s' or 'S', then your program should print a message informing the user of their mistake, and draw nothing.  
     Otherwise your program should draw the requested triangle/square of the required size.


Stretch (lab03Stretch.py)
    1) Rounding
     Using conditional selection (if-else), write a function named roundit that will take a floating-point value as its 
     only argument and returns an integer rounded to the nearest integer value using the method described above.  
     This function’s return value depends only on its arguments (no calls to input), and it has no side effects like 
     printing or accessing global variables.

Workout (lab03Workout.py)
    1) Printing Letter Count

        def print_letters(val):
            if val == 1 or 2 or 6:
                print(3)
            elif val == 4 or 5 or 9:
                print(4)
            else:
                print(5)

     The code above is a Python function called print_letters that is supposed to take a single digit positive integer 
     as an argument, and then print an integer representing the number of letters in the English spelling of that value.
     However, there is a logic error present which prevents it from outputting the correct value: regardless of what 
     number you put in, it will always print out 3.  Fix the error with as few changes as possible (in other words, 
     don’t add any new lines of code, just change the existing ones).  
    2) Returning Letter Count
     Write another function in the same file called return_letters that does the same thing as the fixed version of the
     function above, but it returns the number of letters rather than printing it.
    4) Most Letters
     Write a function most_letters that takes in three single digit numbers, and returns the one that has the most letters 
     in its English spelling.  In the case of a tie for the most, print "Tie!" instead, and return nothing.  You must call 
     either print_letters or return_letters as part of your function, and be prepared to explain to your 
     TA why you didn’t/couldn’t use the other one.
